<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{title}}</title>
  
  <!-- MathJax Configuration and Loading -->
  <script>
    window.MathJax = {
      tex: {
        inlineMath: [['\\(', '\\)'], ['$', '$']],
        displayMath: [['\\[', '\\]'], ['$$', '$$']],
        processEscapes: true,
        processEnvironments: true
      },
      svg: {
        fontCache: 'global'
      },
      options: {
        skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
      },
      startup: {
        ready: () => {
          console.log('MathJax is loaded, but not yet initialized');
          try {
            MathJax.startup.defaultReady();
            console.log('MathJax is initialized, and the initial typeset is queued');
          } catch (e) {
            console.error('MathJax initialization error:', e);
          }
        },
        pageReady: () => {
          console.log('MathJax page ready');
          return MathJax.startup.defaultPageReady();
        }
      }
    };
    
    // Fallback timeout to mark MathJax as ready even if it fails to load
    setTimeout(() => {
      if (typeof window.MathJax === 'undefined') {
        console.warn('MathJax failed to load, creating mock object');
        window.MathJax = {
          startup: {
            document: {
              state: () => 10 // Return READY state
            }
          },
          typesetPromise: () => Promise.resolve()
        };
      }
    }, 8000);
  </script>
  <script type="text/javascript" id="MathJax-script" async
    src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js"
    onerror="console.error('Failed to load MathJax from CDN'); window.mathJaxLoadError = true;">
  </script>
  
  <style>
    /* Reset and base styles */
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: {{style.fontFamily}};
      font-size: {{style.fontSize}};
      line-height: 1.6;
      color: #333;
      background: white;
      padding: 0;
      margin: 0;
    }

    /* Page layout */
    .page {
      width: 100%;
      min-height: 100vh;
      padding: 0;
      margin: 0;
    }

    /* Title page */
    .title-page {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      text-align: center;
      page-break-after: always;
      border-bottom: none;
    }

    .title-page h1 {
      font-size: 2.5em;
      margin-bottom: 1em;
      color: #2c3e50;
    }

    .title-page .metadata {
      font-size: 1.1em;
      color: #666;
      margin-bottom: 0.5em;
    }

    .title-page .generated {
      font-size: 0.9em;
      color: #888;
      margin-top: 2em;
    }

    /* Message styles */
    .message {
      margin: 1.5em 0;
      padding: 1em;
      border-radius: 8px;
      page-break-inside: avoid;
      orphans: 2;
      widows: 2;
    }

    .message.user {
      background-color: #e3f2fd;
      border-left: 4px solid #2196f3;
    }

    .message.assistant {
      background-color: #f3e5f5;
      border-left: 4px solid #9c27b0;
    }

    .message.tool {
      background-color: #e8f5e9;
      border-left: 4px solid #4caf50;
    }

    .message.system {
      background-color: #fff3e0;
      border-left: 4px solid #ff9800;
    }

    .message-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 0.75em;
      font-size: 0.9em;
      color: #666;
      border-bottom: 1px solid #eee;
      padding-bottom: 0.5em;
    }

    .message-role {
      font-weight: bold;
      text-transform: capitalize;
    }

    .message-timestamp {
      font-size: 0.8em;
    }

    .message-model {
      font-size: 0.8em;
      font-style: italic;
    }

    .message-content {
      line-height: 1.7;
    }

    /* Typography */
    h1, h2, h3, h4, h5, h6 {
      margin: 1em 0 0.5em 0;
      color: #2c3e50;
      page-break-after: avoid;
    }

    h1 { font-size: 1.8em; }
    h2 { font-size: 1.5em; }
    h3 { font-size: 1.3em; }
    h4 { font-size: 1.1em; }

    p {
      margin: 0.75em 0;
      text-align: justify;
    }

    /* Media placeholder (no actual media loading) */
    .media-placeholder {
      background-color: #f0f0f0;
      border: 2px dashed #ccc;
      border-radius: 4px;
      padding: 2em;
      margin: 1em 0;
      text-align: center;
      color: #666;
      font-style: italic;
    }

    /* Footer styles */
    .conversation-footer {
      margin-top: 3em;
      padding-top: 1em;
      border-top: 2px solid #ddd;
      text-align: center;
      color: #666;
      font-size: 0.9em;
    }
  </style>
</head>
<body>
  <!-- Title Page -->
  <div class="title-page">
    <h1>{{title}} (No Media Debug)</h1>
    <div class="metadata">{{totalMessages}} messages</div>
    {{#if generated}}
    <div class="generated">Generated on {{generated}}</div>
    {{/if}}
  </div>

  <!-- Messages -->
  <div class="page">
    {{#each messages}}
    <div class="message {{role}} avoid-break">
      <div class="message-header">
        <div>
          <span class="message-role">{{role}}</span>
          {{#if model}}
          <span class="message-model">({{model}})</span>
          {{/if}}
        </div>
        {{#if timestamp}}
        <div class="message-timestamp">{{timestamp}}</div>
        {{/if}}
      </div>
      
      <div class="message-content">
        {{#if content.text}}
        <div class="text-content">
          {{{content.text}}}
        </div>
        {{/if}}
        
        {{#if content.mediaRefs}}
        {{#if content.mediaRefs.length}}
        <div class="media-placeholder">
          ðŸ“Ž {{content.mediaRefs.length}} media file(s) - Media loading disabled for debugging
        </div>
        {{/if}}
        {{/if}}
      </div>
    </div>
    {{/each}}
  </div>

  <!-- Footer -->
  <div class="conversation-footer">
    <div>End of conversation</div>
    <div>Exported from Archive Browser (No Media Debug Version)</div>
  </div>

  <!-- Wait for MathJax to be ready -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOM Content Loaded, checking for MathJax...');
      
      // Function to mark page as ready
      const markReady = () => {
        window.mathjaxReady = true;
        console.log('Page marked as ready for PDF generation');
      };
      
      // Check if MathJax loaded successfully
      if (window.mathJaxLoadError) {
        console.warn('MathJax CDN load error detected, proceeding without LaTeX');
        markReady();
        return;
      }
      
      // Process any LaTeX content that might be in the HTML
      if (window.MathJax && window.MathJax.typesetPromise) {
        console.log('MathJax available, starting typesetting...');
        MathJax.typesetPromise().then(() => {
          console.log('MathJax typesetting complete');
          markReady();
        }).catch((err) => {
          console.error('MathJax typesetting error:', err);
          markReady(); // Continue even if MathJax fails
        });
      } else {
        console.log('MathJax not available, proceeding without LaTeX');
        markReady();
      }
      
      // Fallback timeout to ensure we don't wait forever
      setTimeout(() => {
        if (!window.mathjaxReady) {
          console.warn('MathJax timeout, forcing ready state');
          markReady();
        }
      }, 5000);
    });
  </script>
</body>
</html>