<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Multiple Conversations Export</title>
  
  <!-- MathJax Configuration and Loading -->
  <script>
    window.MathJax = {
      tex: {
        inlineMath: [['\\(', '\\)']],
        displayMath: [['\\[', '\\]']],
        processEscapes: true,
        processEnvironments: true
      },
      svg: {
        fontCache: 'global'
      },
      startup: {
        ready: () => {
          console.log('MathJax is loaded, but not yet initialized');
          MathJax.startup.defaultReady();
          console.log('MathJax is initialized, and the initial typeset is queued');
        }
      }
    };
  </script>
  <script type="text/javascript" id="MathJax-script" async
    src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js">
  </script>
  
  <style>
    /* Reset and base styles */
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: {{style.fontFamily}};
      font-size: {{style.fontSize}};
      line-height: 1.6;
      color: #333;
      background: white;
      padding: 0;
      margin: 0;
    }

    /* Title page */
    .title-page {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      text-align: center;
      page-break-after: always;
    }

    .title-page h1 {
      font-size: 2.5em;
      margin-bottom: 1em;
      color: #2c3e50;
    }

    .title-page .metadata {
      font-size: 1.1em;
      color: #666;
      margin-bottom: 0.5em;
    }

    /* Table of Contents */
    .table-of-contents {
      page-break-after: always;
      padding: 2em 0;
    }

    .table-of-contents h2 {
      font-size: 2em;
      margin-bottom: 1em;
      color: #2c3e50;
      border-bottom: 2px solid #3498db;
      padding-bottom: 0.5em;
    }

    .toc-entry {
      display: flex;
      justify-content: space-between;
      padding: 0.75em 0;
      border-bottom: 1px dotted #ccc;
    }

    .toc-entry .title {
      font-weight: bold;
      color: #2c3e50;
    }

    .toc-entry .details {
      color: #666;
      font-size: 0.9em;
    }

    /* Conversation section */
    .conversation-section {
      page-break-before: always;
      margin: 2em 0;
    }

    .conversation-header {
      background: linear-gradient(135deg, #3498db, #2c3e50);
      color: white;
      padding: 1.5em;
      margin-bottom: 2em;
      border-radius: 8px;
      page-break-after: avoid;
    }

    .conversation-header h2 {
      font-size: 1.8em;
      margin-bottom: 0.5em;
    }

    .conversation-header .meta {
      font-size: 0.9em;
      opacity: 0.9;
    }

    /* Message styles */
    .message {
      margin: 1.5em 0;
      padding: 1em;
      border-radius: 8px;
      page-break-inside: avoid;
      orphans: 2;
      widows: 2;
    }

    .message.user {
      background-color: #e3f2fd;
      border-left: 4px solid #2196f3;
    }

    .message.assistant {
      background-color: #f3e5f5;
      border-left: 4px solid #9c27b0;
    }

    .message.tool {
      background-color: #e8f5e9;
      border-left: 4px solid #4caf50;
    }

    .message.system {
      background-color: #fff3e0;
      border-left: 4px solid #ff9800;
    }

    .message-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 0.75em;
      font-size: 0.9em;
      color: #666;
      border-bottom: 1px solid #eee;
      padding-bottom: 0.5em;
    }

    .message-role {
      font-weight: bold;
      text-transform: capitalize;
    }

    .message-timestamp {
      font-size: 0.8em;
    }

    .message-content {
      line-height: 1.7;
    }

    /* Typography */
    h1, h2, h3, h4, h5, h6 {
      margin: 1em 0 0.5em 0;
      color: #2c3e50;
      page-break-after: avoid;
    }

    h3 { font-size: 1.5em; }
    h4 { font-size: 1.3em; }
    h5 { font-size: 1.1em; }

    p {
      margin: 0.75em 0;
      text-align: justify;
    }

    /* Code blocks */
    pre {
      background-color: #f8f9fa;
      border: 1px solid #e9ecef;
      border-radius: 4px;
      padding: 1em;
      margin: 1em 0;
      overflow-x: auto;
      font-family: 'Courier New', monospace;
      font-size: 0.9em;
      page-break-inside: avoid;
    }

    code {
      background-color: #f8f9fa;
      padding: 0.2em 0.4em;
      border-radius: 3px;
      font-family: 'Courier New', monospace;
      font-size: 0.9em;
    }

    pre code {
      background: none;
      padding: 0;
    }

    /* Media styles - Fixed aspect ratio preservation */
    .media-container {
      margin: 1em 0;
      text-align: center;
      page-break-inside: avoid;
      width: 100%;
    }

    .media-item {
      margin: 0.5em;
      display: inline-block;
      vertical-align: top;
      max-width: 100%;
    }

    .media-item img {
      /* Preserve aspect ratio regardless of container width */
      max-width: 100%;
      height: auto;
      width: auto;
      /* Set a reasonable max height to prevent oversized images */
      max-height: 500px;
      /* Ensure aspect ratio is preserved when both max-width and max-height apply */
      object-fit: contain;
      border: 1px solid #ddd;
      border-radius: 4px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      /* Center the image within its container */
      display: block;
      margin: 0 auto;
    }

    .media-item video {
      max-width: 100%;
      height: auto;
      width: auto;
      max-height: 400px;
      object-fit: contain;
      border: 1px solid #ddd;
      border-radius: 4px;
      display: block;
      margin: 0 auto;
    }

    .audio-placeholder {
      background-color: #f0f0f0;
      border: 2px dashed #ccc;
      border-radius: 4px;
      padding: 2em;
      text-align: center;
      color: #666;
      font-style: italic;
    }

    /* LaTeX/Math styles */
    .MathJax_Display {
      margin: 1em 0;
      page-break-inside: avoid;
    }

    .MathJax {
      font-size: inherit !important;
    }

    /* Print-specific styles */
    @media print {
      body {
        print-color-adjust: exact;
        -webkit-print-color-adjust: exact;
      }
      
      .conversation-section {
        break-before: page;
      }
      
      .message {
        break-inside: avoid;
      }
      
      .media-container {
        break-inside: avoid;
      }
    }

    /* Footer */
    .export-footer {
      margin-top: 3em;
      padding-top: 1em;
      border-top: 2px solid #ddd;
      text-align: center;
      color: #666;
      font-size: 0.9em;
      page-break-before: always;
    }
  </style>
</head>
<body>
  <!-- Title Page -->
  <div class="title-page">
    <h1>Archive Export</h1>
    <div class="metadata">{{conversations.length}} conversations</div>
    {{#if generated}}
    <div class="metadata">Generated on {{generated}}</div>
    {{/if}}
  </div>

  <!-- Table of Contents -->
  <div class="table-of-contents">
    <h2>Table of Contents</h2>
    {{#each conversations}}
    <div class="toc-entry">
      <div>
        <div class="title">{{title}}</div>
        <div class="details">{{messages.length}} messages{{#if createTime}} â€¢ {{createTime}}{{/if}}</div>
      </div>
    </div>
    {{/each}}
  </div>

  <!-- Conversations -->
  {{#each conversations}}
  <div class="conversation-section">
    <div class="conversation-header">
      <h2>{{title}}</h2>
      <div class="meta">
        {{messages.length}} messages
        {{#if createTime}} â€¢ Created {{createTime}}{{/if}}
        {{#if id}} â€¢ ID: {{id}}{{/if}}
      </div>
    </div>

    <!-- Messages -->
    {{#each messages}}
    <div class="message {{role}}">
      <div class="message-header">
        <div>
          <span class="message-role">{{role}}</span>
          {{#if model}}
          <span class="message-model">({{model}})</span>
          {{/if}}
        </div>
        {{#if timestamp}}
        <div class="message-timestamp">{{timestamp}}</div>
        {{/if}}
      </div>
      
      <div class="message-content">
        {{#if content.text}}
        <div class="text-content">
          {{{content.text}}}
        </div>
        {{/if}}
        
        {{#if content.mediaRefs}}
        {{#if content.mediaRefs.length}}
        <div class="media-container">
          {{#each content.mediaRefs}}
          <div class="media-item">
            {{#if (eq type 'image')}}
            <img src="{{url}}" alt="{{filename}}">
            {{else if (eq type 'video')}}
            <video controls>
              <source src="{{url}}" type="video/mp4">
              Video: {{filename}}
            </video>
            {{else if (eq type 'audio')}}
            <div class="audio-placeholder">
              ðŸŽµ Audio: {{#if originalName}}{{originalName}}{{else}}{{filename}}{{/if}}
              {{#if duration}}({{duration}}s){{/if}}
            </div>
            {{else}}
            {{#if originalName}}
            <div class="audio-placeholder">
              ðŸ“Ž {{originalName}}
            </div>
            {{/if}}
            {{/if}}
          </div>
          {{/each}}
        </div>
        {{/if}}
        {{/if}}
      </div>
    </div>
    {{/each}}
  </div>
  {{/each}}

  <!-- Footer -->
  <div class="export-footer">
    <div>End of Export</div>
    <div>Generated by Archive Browser</div>
    {{#if generated}}
    <div>{{generated}}</div>
    {{/if}}
  </div>

  <!-- Handlebars helpers -->
  <script>
    if (typeof Handlebars !== 'undefined') {
      Handlebars.registerHelper('eq', function(a, b) {
        return a === b;
      });
    }
  </script>

  <!-- Wait for MathJax to be ready -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      if (window.MathJax && window.MathJax.typesetPromise) {
        MathJax.typesetPromise().then(() => {
          console.log('MathJax typesetting complete');
          window.mathjaxReady = true;
        }).catch((err) => {
          console.error('MathJax error:', err);
          window.mathjaxReady = true;
        });
      } else {
        window.mathjaxReady = true;
      }
    });
  </script>
</body>
</html>
